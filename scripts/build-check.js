#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîç Iniciando verifica√ß√£o de build...\n');

// Verificar se o .env.local existe
if (!fs.existsSync('.env.local')) {
  console.log('‚ö†Ô∏è  .env.local n√£o encontrado. Criando arquivo de exemplo...');
  const envExample = `# Configura√ß√µes do Site
NEXT_PUBLIC_SITE_URL=https://kaleidos.com.br
NEXT_PUBLIC_SITE_NAME=Kaleidos Digital
NEXT_PUBLIC_GOOGLE_ANALYTICS_ID=

# Redes Sociais
NEXT_PUBLIC_INSTAGRAM_URL=https://www.instagram.com/kaleidosdigital
NEXT_PUBLIC_LINKEDIN_URL=https://www.linkedin.com/company/kaleidos-digital/?viewAsMember=true

# Contato
NEXT_PUBLIC_CONTACT_EMAIL=contato@kaleidos.com.br
NEXT_PUBLIC_CONTACT_PHONE=+55 11 99999-9999

# SEO
NEXT_PUBLIC_SITE_DESCRIPTION=Especialistas em crescimento de marcas atrav√©s de conte√∫do criativo, automa√ß√µes inteligentes e lan√ßamentos estrat√©gicos
NEXT_PUBLIC_SITE_KEYWORDS=marketing digital, conte√∫do criativo, automa√ß√µes, lan√ßamentos, growth hacking, redes sociais
`;
  fs.writeFileSync('.env.local', envExample);
  console.log('‚úÖ .env.local criado com sucesso!\n');
}

// Verificar TypeScript
console.log('üîç Verificando TypeScript...');
try {
  execSync('npx tsc --noEmit', { stdio: 'inherit' });
  console.log('‚úÖ TypeScript sem erros!\n');
} catch (error) {
  console.log('‚ùå Erros de TypeScript encontrados!\n');
  process.exit(1);
}

// Verificar ESLint (apenas arquivos fonte)
console.log('üîç Verificando ESLint...');
try {
  execSync('npx eslint src/ --ext .ts,.tsx --max-warnings 10', { stdio: 'inherit' });
  console.log('‚úÖ ESLint verificado!\n');
} catch (error) {
  console.log('‚ö†Ô∏è  Alguns warnings de ESLint encontrados (n√£o cr√≠ticos)\n');
}

// Build de produ√ß√£o
console.log('üî® Iniciando build de produ√ß√£o...');
try {
  execSync('npm run build', { stdio: 'inherit' });
  console.log('‚úÖ Build de produ√ß√£o conclu√≠do com sucesso!\n');
} catch (error) {
  console.log('‚ùå Erro no build de produ√ß√£o!\n');
  process.exit(1);
}

// Verificar arquivos de build
console.log('üîç Verificando arquivos de build...');
const buildDir = path.join(process.cwd(), '.next');
if (fs.existsSync(buildDir)) {
  console.log('‚úÖ Pasta .next criada com sucesso!');
  
  // Verificar se o build tem tamanho razo√°vel
  const buildSize = fs.statSync(buildDir).size;
  console.log(`üìä Tamanho do build: ${(buildSize / 1024 / 1024).toFixed(2)} MB`);
  
  if (buildSize > 500 * 1024 * 1024) { // 500MB
    console.log('‚ö†Ô∏è  Build muito grande! Considere otimizar.');
  } else {
    console.log('‚úÖ Tamanho do build adequado!');
  }
} else {
  console.log('‚ùå Pasta .next n√£o encontrada!');
  process.exit(1);
}

// Verificar sitemap
console.log('\nüîç Verificando sitemap...');
try {
  const sitemapPath = path.join(process.cwd(), '.next/server/app/sitemap.xml');
  if (fs.existsSync(sitemapPath)) {
    const sitemapContent = fs.readFileSync(sitemapPath, 'utf8');
    const urlCount = (sitemapContent.match(/<url>/g) || []).length;
    console.log(`‚úÖ Sitemap gerado com ${urlCount} URLs!`);
  } else {
    console.log('‚ö†Ô∏è  Sitemap n√£o encontrado no build!');
  }
} catch (error) {
  console.log('‚ùå Erro ao verificar sitemap!');
}

// Verificar robots.txt
console.log('üîç Verificando robots.txt...');
const robotsPath = path.join(process.cwd(), 'public/robots.txt');
if (fs.existsSync(robotsPath)) {
  console.log('‚úÖ Robots.txt encontrado!');
} else {
  console.log('‚ùå Robots.txt n√£o encontrado!');
}

console.log('\nüéâ Verifica√ß√£o de build conclu√≠da com sucesso!');
console.log('üöÄ O site est√° pronto para deploy no Vercel!'); 